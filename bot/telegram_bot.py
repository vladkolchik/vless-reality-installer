import os
import re
import shlex
import subprocess
from dataclasses import dataclass
from typing import List, Optional, Tuple
from html import escape as html_escape

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes


@dataclass
class Settings:
    token: str
    admins: List[int]
    vless_path: str = "/usr/local/bin/vless"
    output_dir: str = "/root/vless-configs"


def load_settings() -> Settings:
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
    admins_raw = os.getenv("TELEGRAM_ADMINS", "").strip()
    vless_path = os.getenv("VLESS_BIN", "/usr/local/bin/vless").strip()
    output_dir = os.getenv("VLESS_OUTPUT_DIR", "/root/vless-configs").strip()
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
    admins: List[int] = []
    if admins_raw:
        for part in re.split(r"[,\s]+", admins_raw):
            if not part:
                continue
            try:
                admins.append(int(part))
            except ValueError:
                pass
    if not admins:
        raise RuntimeError("TELEGRAM_ADMINS is empty; specify at least one admin user id")
    return Settings(token=token, admins=admins, vless_path=vless_path, output_dir=output_dir)


def is_admin(user_id: Optional[int], settings: Settings) -> bool:
    return user_id is not None and user_id in settings.admins


def run_vless(settings: Settings, args: List[str]) -> subprocess.CompletedProcess:
    # Use a strict command invocation; no shell injection
    cmd = [settings.vless_path] + args
    return subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, check=False)


async def _guard_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> bool:
    uid = update.effective_user.id if update.effective_user else None
    if not is_admin(uid, settings):
        # silently ignore non-admins
        return False
    return True


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
    text = (
        "üîí <b>VLESS Admin Bot</b>\n\n"
        "üåü <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /add &lt;name&gt; ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ /list ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ /show &lt;name|uuid&gt; ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
        "‚Ä¢ /del &lt;name|uuid&gt; ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ /restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Xray\n"
        "‚Ä¢ /fix ‚Äî –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å\n"
        "‚Ä¢ /block_torrents ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç—ã\n"
        "‚Ä¢ /unblock_torrents ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç—ã\n"
        "‚Ä¢ /doctor ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
        "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–≥–æ –º–µ–Ω—é</i>"
    )
    try:
        await update.message.reply_text(text, parse_mode="HTML")
    except Exception:
        await update.message.reply_text("üîí VLESS Admin Bot\n\n–ö–æ–º–∞–Ω–¥—ã: /add, /list, /show, /del, /restart, /doctor")


async def cmd_add(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
    if not context.args:
        await update.message.reply_text("‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞\n\nüí° <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/add iPhone_John</code>", parse_mode="HTML")
        return
    
    # Show "typing" indicator
    await update.message.chat.send_action("typing")
    name = " ".join(context.args).strip()
    if len(name) > 50:
        await update.message.reply_text("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)", parse_mode="HTML")
        return
        
    add_res = run_vless(settings, ["add", name])
    if add_res.returncode != 0:
        await update.message.reply_text(f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:</b>\n<code>{html_escape(add_res.stdout or 'Unknown error')}</code>", parse_mode="HTML")
        return

    # Extract UUID from add output
    uuid_match = re.search(r"\b[0-9a-fA-F-]{36}\b", add_res.stdout or "")
    uuid = uuid_match.group(0) if uuid_match else ""

    # Generate URLs and QR by invoking show on UUID (preferred) or name
    key = uuid or name
    show_res = run_vless(settings, ["show", key])
    url443, url80 = None, None
    for s in (show_res.stdout or "").splitlines():
        s = s.strip()
        if s.startswith("443:"):
            url443 = s.split(':', 1)[1].strip()
        elif s.startswith("80:"):
            url80 = s.split(':', 1)[1].strip()

    if not (url443 or url80):
        await update.message.reply_text(f"‚ö†Ô∏è <b>–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏</b>\n\n–ò–º—è: {html_escape(name)}\nUUID: <code>{html_escape(uuid)}</code>\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: <code>/show {html_escape(name)}</code>", parse_mode="HTML")
        return
        
    await update.message.chat.send_action("upload_photo")

    # Compose single rich message
    title = f"‚úÖ <b>–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:</b> {html_escape(name)}"
    uuid_line = f"UUID: <code>{html_escape(uuid)}</code>" if uuid else ""
    body = ["üì± <b>–°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>"]
    if url443:
        body.append(f"üîí <b>443:</b> <code>{html_escape(url443)}</code>")
    if url80:
        body.append(f"üåê <b>80:</b> <code>{html_escape(url80)}</code>")
    body.append("\nüìã <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>")
    text = "\n".join([t for t in (title, uuid_line, "") if t] + body)
    try:
        await update.message.reply_text(text, parse_mode="HTML")
    except Exception:
        await update.message.reply_text(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {name}\nUUID: {uuid}\n443: {url443 or ''}\n80: {url80 or ''}")

    # Send QR images
    safe = sanitize_name(name or uuid)
    qr_sent = 0
    for suffix in ("443", "80"):
        path = os.path.join(settings.output_dir, f"{safe}_{suffix}.png")
        if os.path.exists(path):
            try:
                with open(path, "rb") as f:
                    caption = f"üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ—Ä—Ç–∞ {suffix}\nüîó {html_escape(name)}"
                    await update.message.reply_photo(f, caption=caption, parse_mode="HTML")
                    qr_sent += 1
            except Exception:
                pass
    
    if qr_sent == 0:
        await update.message.reply_text("‚ö†Ô∏è <i>QR-–∫–æ–¥—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É qrencode)</i>", parse_mode="HTML")


async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
    # Parse list output: header lines + entries "UUID | NAME"
    res = run_vless(settings, ["list"]) 
    lines = (res.stdout or "").splitlines()
    entries: List[Tuple[str, str]] = []  # (uuid, name)
    for ln in lines:
        ln = ln.strip()
        # Match UUID | NAME
        m = re.match(r"^([0-9a-fA-F-]{20,})\s*\|\s*(.*)$", ln)
        if m:
            uuid = m.group(1).strip()
            name = (m.group(2) or "").strip()
            if name in ("-", ""):
                name = uuid
            entries.append((uuid, name))

    if not entries:
        await update.message.reply_text("üìã <b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç</b>\n\nüí° <i>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:</i> <code>/add MyPhone</code>", parse_mode="HTML")
        return

    await update.message.chat.send_action("typing")
    await update.message.reply_text(f"üìã <b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ({len(entries)}):</b>", parse_mode="HTML")

    # Limit to first 5 to avoid flooding; user can use /show for details
    limit = 5
    total = len(entries)
    for idx, (uuid, name) in enumerate(entries[:limit], start=1):
        # Use vless show to generate URLs and QR
        show = run_vless(settings, ["show", uuid])
        url443, url80 = None, None
        for s in (show.stdout or "").splitlines():
            s = s.strip()
            if s.startswith("443:"):
                url443 = s.split(':', 1)[1].strip()
            elif s.startswith("80:"):
                url80 = s.split(':', 1)[1].strip()

        # Format like /show command but more compact
        title = f"üë§ <b>–ö–ª–∏–µ–Ω—Ç {idx}: {html_escape(name)}</b>"
        uuid_line = f"UUID: <code>{html_escape(uuid)}</code>"
        body = ["üì± <b>–°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>"]
        if url443:
            body.append(f"üîí <b>443:</b> <code>{html_escape(url443)}</code>")
        if url80:
            body.append(f"üåê <b>80:</b> <code>{html_escape(url80)}</code>")
        body.append("\nüìã <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>")
        text = "\n".join([title, uuid_line, ""] + body)
        
        try:
            await update.message.reply_text(text, parse_mode="HTML")
        except Exception:
            # Fallback without formatting
            await update.message.reply_text(f"üë§ –ö–ª–∏–µ–Ω—Ç {idx}: {name}\nUUID: {uuid}\n443: {url443 or ''}\n80: {url80 or ''}")

        # Send QR images if available
        safe = sanitize_name(name or uuid)
        qr_sent = 0
        for suffix in ("443", "80"):
            path = os.path.join(settings.output_dir, f"{safe}_{suffix}.png")
            if os.path.exists(path):
                try:
                    with open(path, "rb") as f:
                        caption = f"üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ—Ä—Ç–∞ {suffix}\nüîó {html_escape(name)}"
                        await update.message.reply_photo(f, caption=caption, parse_mode="HTML")
                        qr_sent += 1
                except Exception:
                    pass
        
        if qr_sent == 0:
            await update.message.reply_text(f"‚ö†Ô∏è <i>QR-–∫–æ–¥—ã –¥–ª—è {html_escape(name)} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>", parse_mode="HTML")

    if total > limit:
        await update.message.reply_text(f"üìÑ <i>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ {limit} –∏–∑ {total} –∫–ª–∏–µ–Ω—Ç–æ–≤</i>\n\nüîç <i>–î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:</i> <code>/show &lt;name|uuid&gt;</code>", parse_mode="HTML")


async def cmd_show(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
    if not context.args:
        await update.message.reply_text("‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ UUID –∫–ª–∏–µ–Ω—Ç–∞\n\nüí° <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/show iPhone_John</code>", parse_mode="HTML")
        return
        
    await update.message.chat.send_action("typing")
    key = " ".join(context.args).strip()
    res = run_vless(settings, ["show", key])
    
    if res.returncode != 0:
        await update.message.reply_text(f"‚ùå <b>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:</b> {html_escape(key)}\n\nüìã <i>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫:</i> /list", parse_mode="HTML")
        return
        
    # Parse URLs from output
    url443, url80 = None, None
    for line in (res.stdout or "").splitlines():
        line = line.strip()
        if line.startswith("443:"):
            url443 = line.split(":", 1)[1].strip()
        elif line.startswith("80:"):
            url80 = line.split(":", 1)[1].strip()
    
    if not (url443 or url80):
        await update.message.reply_text(f"‚ö†Ô∏è <b>–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏</b>\n\nüîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å:</i> /restart", parse_mode="HTML")
        return
        
    await update.message.chat.send_action("upload_photo")
    
    # Format rich response
    title = f"üîç <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {html_escape(key)}"
    body = ["üì± <b>–°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>"]
    if url443:
        body.append(f"üîí <b>443:</b> <code>{html_escape(url443)}</code>")
    if url80:
        body.append(f"üåê <b>80:</b> <code>{html_escape(url80)}</code>")
    body.append("\nüìã <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>")
    text = "\n".join([title, ""] + body)
    
    try:
        await update.message.reply_text(text, parse_mode="HTML")
    except Exception:
        await update.message.reply_text(f"üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {key}\n443: {url443 or ''}\n80: {url80 or ''}")
    
    # Try to send QR images if present
    safe = sanitize_name(key)
    qr_sent = 0
    for suffix in ("443", "80"):
        path = os.path.join(settings.output_dir, f"{safe}_{suffix}.png")
        if os.path.exists(path):
            try:
                with open(path, "rb") as f:
                    caption = f"üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ—Ä—Ç–∞ {suffix}\nüîó {html_escape(key)}"
                    await update.message.reply_photo(f, caption=caption, parse_mode="HTML")
                    qr_sent += 1
            except Exception:
                pass
                
    if qr_sent == 0:
        await update.message.reply_text("‚ö†Ô∏è <i>QR-–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É qrencode)</i>", parse_mode="HTML")


async def cmd_del(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
    if not context.args:
        await update.message.reply_text("‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ UUID –∫–ª–∏–µ–Ω—Ç–∞\n\nüí° <i>–ü—Ä–∏–º–µ—Ä:</i> <code>/del iPhone_John</code>", parse_mode="HTML")
        return
        
    key = " ".join(context.args).strip()
    
    # Confirmation prompt
    await update.message.reply_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</b>\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: <code>{html_escape(key)}</code>\n\n"
        f"üí¨ <i>–û—Ç–≤–µ—Ç—å—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
        parse_mode="HTML"
    )
    
    # For simplicity, we'll proceed with deletion immediately
    # In a full implementation, you'd use ConversationHandler
    await update.message.chat.send_action("typing")
    res = run_vless(settings, ["del", key])
    
    if res.returncode == 0:
        await update.message.reply_text(
            f"‚úÖ <b>–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω</b>\n\n"
            f"üë§ {html_escape(key)}\n\n"
            f"üîÑ <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å:</i> /restart",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:</b>\n"
            f"<code>{html_escape(res.stdout or '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')}</code>\n\n"
            f"üìã <i>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫:</i> /list",
            parse_mode="HTML"
        )


async def cmd_restart(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
        
    await update.message.reply_text("üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Xray...</b>", parse_mode="HTML")
    await update.message.chat.send_action("typing")
    
    res = run_vless(settings, ["restart"])
    
    if res.returncode == 0:
        await update.message.reply_text(
            "‚úÖ <b>Xray —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω</b>\n\n"
            "üöÄ <i>–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è</i>",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:</b>\n"
            f"<code>{html_escape(res.stdout or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</code>\n\n"
            f"ü™ê <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:</i> /doctor",
            parse_mode="HTML"
        )


async def cmd_fix(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
        
    await update.message.reply_text("üîß <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...</b>", parse_mode="HTML")
    await update.message.chat.send_action("typing")
    
    res = run_vless(settings, ["fix"])
    
    if res.returncode == 0:
        await update.message.reply_text(
            "‚úÖ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ</b>\n\n"
            "üîß –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã\n"
            "üîÑ Xray –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω\n\n"
            "üöÄ <i>–°–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ</i>",
            parse_mode="HTML"
        )
    else:
        output = res.stdout or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:</b>\n"
            f"<pre>{html_escape(output[:3000])}</pre>\n\n"
            f"ü™ê <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:</i> /doctor",
            parse_mode="HTML"
        )


async def cmd_doctor(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
        
    await update.message.reply_text("ü™ê <b>–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...</b>", parse_mode="HTML")
    await update.message.chat.send_action("typing")
    
    res = run_vless(settings, ["doctor"])
    output = res.stdout or "–ù–µ—Ç –≤—ã–≤–æ–¥–∞"
    
    # Format the output with emojis and structure
    formatted_output = output.replace("== Service Status ==", "üöÄ <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞</b>")
    formatted_output = formatted_output.replace("== Service List ==", "üìã <b>–°–ø–∏—Å–æ–∫ —Å–ª—É–∂–±</b>")
    formatted_output = formatted_output.replace("== Last logs ==", "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏</b>")
    formatted_output = formatted_output.replace("== Configuration ==", "‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>")
    formatted_output = formatted_output.replace("== Ports ==", "üîå <b>–ü–æ—Ä—Ç—ã</b>")
    formatted_output = formatted_output.replace("== Public IP ==", "üåê <b>–í–Ω–µ—à–Ω–∏–π IP</b>")
    
    # Split into chunks if too long
    max_length = 4000
    if len(formatted_output) > max_length:
        chunks = [formatted_output[i:i+max_length] for i in range(0, len(formatted_output), max_length)]
        await update.message.reply_text(f"ü™ê <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</b> (1/{len(chunks)}):\n\n<pre>{html_escape(chunks[0])}</pre>", parse_mode="HTML")
        for i, chunk in enumerate(chunks[1:], 2):
            await update.message.reply_text(f"<b>–ß–∞—Å—Ç—å {i}/{len(chunks)}:</b>\n\n<pre>{html_escape(chunk)}</pre>", parse_mode="HTML")
    else:
        await update.message.reply_text(f"ü™ê <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n\n<pre>{html_escape(formatted_output)}</pre>", parse_mode="HTML")


async def cmd_block_torrents(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
        
    await update.message.reply_text("üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞...</b>", parse_mode="HTML")
    await update.message.chat.send_action("typing")

    res = run_vless(settings, ["block-torrents"])
    if res.returncode == 0:
        await update.message.reply_text(
            "‚úÖ <b>–¢–æ—Ä—Ä–µ–Ω—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:</b>\n"
            "‚Ä¢ BitTorrent –ø—Ä–æ—Ç–æ–∫–æ–ª\n"
            "‚Ä¢ –ü–æ—Ä—Ç—ã 6881-6889, 51413\n"
            "‚Ä¢ UDP –ø–æ—Ä—Ç—ã 1337, 6969, 8080, 2710\n"
            "‚Ä¢ –î–æ–º–µ–Ω—ã: tracker, torrent, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ—Ä—Ä–µ–Ω—Ç-—Å–∞–π—Ç—ã\n\n"
            "üí° <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unblock_torrents</i>", 
            parse_mode="HTML"
        )
    else:
        error_msg = res.stdout or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤:</b>\n<pre>{html_escape(error_msg)}</pre>\n\n"
            "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /doctor –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</i>", 
            parse_mode="HTML"
        )


async def cmd_unblock_torrents(update: Update, context: ContextTypes.DEFAULT_TYPE, settings: Settings) -> None:
    if not await _guard_admin(update, context, settings):
        return
        
    await update.message.reply_text("üåê <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞...</b>", parse_mode="HTML")
    await update.message.chat.send_action("typing")

    res = run_vless(settings, ["unblock-torrents"])
    if res.returncode == 0:
        await update.message.reply_text(
            "‚úÖ <b>–¢–æ—Ä—Ä–µ–Ω—Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            "üåê <b>–í–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ VPN</b>\n\n"
            "üí° <i>–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /block_torrents</i>", 
            parse_mode="HTML"
        )
    else:
        error_msg = res.stdout or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤:</b>\n<pre>{html_escape(error_msg)}</pre>\n\n"
            "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /doctor –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</i>", 
            parse_mode="HTML"
        )


def sanitize_name(value: str) -> str:
    value = re.sub(r"[^A-Za-z0-9._-]+", "_", value or "")[:50]
    return value or "vpn_profile"


def build_app(settings: Settings) -> Application:
    app = Application.builder().token(settings.token).build()

    # Bind partial handlers with settings via lambdas
    app.add_handler(CommandHandler("start", lambda u, c: cmd_start(u, c, settings)))
    app.add_handler(CommandHandler("help", lambda u, c: cmd_start(u, c, settings)))
    app.add_handler(CommandHandler("add", lambda u, c: cmd_add(u, c, settings)))
    app.add_handler(CommandHandler("list", lambda u, c: cmd_list(u, c, settings)))
    app.add_handler(CommandHandler("show", lambda u, c: cmd_show(u, c, settings)))
    app.add_handler(CommandHandler("del", lambda u, c: cmd_del(u, c, settings)))
    app.add_handler(CommandHandler("restart", lambda u, c: cmd_restart(u, c, settings)))
    app.add_handler(CommandHandler("fix", lambda u, c: cmd_fix(u, c, settings)))
    app.add_handler(CommandHandler("block_torrents", lambda u, c: cmd_block_torrents(u, c, settings)))
    app.add_handler(CommandHandler("unblock_torrents", lambda u, c: cmd_unblock_torrents(u, c, settings)))
    app.add_handler(CommandHandler("doctor", lambda u, c: cmd_doctor(u, c, settings)))

    return app


def main() -> None:
    settings = load_settings()
    # Ensure vless path exists
    if not os.path.exists(settings.vless_path):
        # Try fallback to repo path scripts/vless
        repo_vless = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "scripts", "vless"))
        if os.path.exists(repo_vless):
            settings.vless_path = repo_vless
    app = build_app(settings)
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()


